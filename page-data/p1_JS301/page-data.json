{"componentChunkName":"component---src-templates-blog-post-js","path":"/p1_JS301/","result":{"data":{"markdownRemark":{"html":"<h4>The bumps in the road have been minimal, but there has been a few.</h4>\n<p>Lets begin the journey to learn <a href=\"https://reactjs.org/\">React</a>.</p>\n<p><code>! SyntaxError: expected expression, got '&#x3C;'</code></p>\n<p>Viewing the inspector in Chrome showed the error originated from the index.js file. Using some technical sophistication learnt from <a href=\"https://www.learnenough.com\">Michael Hartl</a>, the React documentation narrowed the problem down to the browser not being able to render <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>.</p>\n<p>Continuing with the React <a href=\"https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx\">documentation</a> two solutions for adding a JSX preprocessor was provided.  The use of <code>&#x3C;script></code> tags pointing to the preprocessor or adding the preprocessor directly to the project through <a href=\"https://www.npmjs.com/\">npm</a>, the ladder was chosen for this project.  However, after following the steps in the documentation for adding the preprocessor the browser inspector still logged the same Syntax error. Time for more technical sophistication.</p>\n<p>This time we go to the <a href=\"https://babeljs.io/docs/en/babel-cli\">Babel</a> documentation. The steps outlined in the React documentation to run the preprocessor requires the following Babel CLI command to compile the JSX source. <code>npx babel --watch src --out-dir . --presets react-app/prod</code> Per the Babel documentation running this command gives Babel instructions to watch the src directory and compile it every time a change is made and output the compiled files to the root directory. The small writing here is that running <code>--out-dir</code> does not overwrite any other files or directories in the specified output directory. This small writing is where the broken link laid. One of the steps from the React guide instruct you to create a src directory and copy your original .js file into the directory. The problem with copying is that when Babel compiles the src directory and attempts to output the complied code, because the original .js file was copied and not deleted Babel sees a .js file with the same name in the output directory and per the rules of the small writing does not overwrite it, so your src directory is correct but your output dir (what the browser renders is still in correct). The fix, copy the original .js file to the src directory and then delete the original so babel can output a new file with the corrected compiled code.</p>\n<h2>Three takeaways for the novice (me):</h2>\n<ul>\n<li>Technical Sophistication is a thing</li>\n<li>Some times the spec is a better source than stack overflow</li>\n<li>Be sure to understand how plugins integrate with the project</li>\n</ul>","frontmatter":{"title":"#1 JavaScript 30 X React (Drum Machine)"}}},"pageContext":{"slug":"/p1_JS301/"}}}